Java é uma das maiores linguagens com empregabilidade.
Flexibilidade; remuneração
Sistemas web-> back-end +  banco de dados - requisições web- front-end
API Interface de programação: é o que está exposto para o front
API REST é um padrão que estabelece regras como Cliente/servidor com HTTP, comunicação stateless(*); Intergace uniforme e sistemas em camadas.
Usando protocolo HTTP para realizar ações com verbo http: get(pegar), post(inserir), put(salvar) , delete
Padrão camadas:
Cada camada tem um responsabilidade.
Controladores REST
  Data transfers Objects
Camada de serviço
  Entities/ORM
Camada de acesso a dados

Docker -> É uma plataforma de conteinerização.
Um container é como uma “caixinha” que empacota sua aplicação com tudo que ela precisa (código, dependências, bibliotecas, configurações, etc.).
Assim, a aplicação roda de forma igual em qualquer lugar: no seu PC, em um servidor ou na nuvem.

Postman -> Postman
É uma ferramenta para testar APIs (REST, GraphQL, SOAP, etc.).
Com ela, você pode enviar requisições HTTP (GET, POST, PUT, DELETE...) e ver a resposta da API.
É muito usado por devs backend para testar endpoints sem precisar criar uma interface ainda.
Também ajuda a documentar e compartilhar coleções de requisições da API com o time.
lib Maven


Curso Nelio-> Interfaces
Interface é um tipo que define um conjunto de operações que uma class deve implementar.
Um contrato que a classe deve ser, baixo acoplamento.

//Valor por hora de até 12 horas. Se passar de 12hrs o valor é cobrado por dia.
//Além do valor da locação é acrescido no preço do imposto 20% para valores de até 100.00 ou 15% para valores acima de 100.00
//Lê os dados da locação bem como valor por hora e valor diário.Gerar a nota de pagamento informando os dados na tela.
veículo-aluguel-fatura

Tipos de objetos->
Views,Controllers,Entities,Services,Repositories.

Serviços que dependem entre si existe um auto-acoplamento porém não é uma boa parte pois ficam dependentes, uma vez que se for alterar precisa de dois pontos de alteração.
Em termos de manutenção é ruim. -> Usando Interface que define um contrato  faz as outras classes dependerem dela.
Na interface tem um contrato(método) abstrato e a classe filha implementa esse método
